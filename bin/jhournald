#! /bin/bash
# -*-  Mode: sh; tab-width: 8; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
#
# @file         jhournald
#
#               Shell script that copies output pipes from daemons launched with
#               shystemctl where the logs are sent to the journal. The script
#               reads a line from the pipe, and adds a timestamp for each line 
#               as it is read.
#
#               Timestamps are locale C, timezone UTC.
#
#               Note - this is pretty inefficient.  A call to check the pidfile and
#               a call to date per log line will definitely be a performance bottleneck,
#               which could affect the log timestamps as well as stall the program at
#               the other end of the pipe.
# 
# @author       Wes Garland, wes@kingsds.network
# @date         Feb 2022
#
ESC_SEQ=`echo -en "\x03\x01\x07\x03 jhournald"`

cd `dirname "$0"`
[ "${SHYSTEMD_BIN_DIR}" ] || export SHYSTEMD_BIN_DIR=`pwd`
cd "${SHYSTEMD_BIN_DIR}"/..
. etc/shystemd/default-env.incl
argv="$@"

name=""
pidfile=""

sed='tail -F | sed -u'
if [ "`uname -s`" = "Darwin" ] && echo | sed -l >/dev/null 2>&1; then
  sed='sed -l' # native mac sed (bsd?)
fi

# Need to process arguments before most libraries load
processArg()
{
  local option="$1"
  local optarg="$2"

  case "$option" in
    h|help)
      ${SHYSTEMD_PAGER:-less -FEd}<<EOF
Usage: jhournald <unit> [--daemon-pidfile=<filename>] 
                        [--name=<process name>] 
EOF
      exit 0
      ;;
    daemon-pidfile)
      pidfile="$OPTARG"
      ;;
    name)
      name="$OPTARG"
      ;;
    v|version)
      echo "journald 000"
      echo "shystemd=1.0.0"
      ;;
    debug)
      export SHYSTEMD_DEBUG=1
      ;;
    no-ask-password)
      export SHYSTEMD_NO_SUDO=1
      ;;
    u|unit)
      unit=
      ;;
    *)
      echo "Unrecognized option: ${OPTION}" >&2
      exit 114
      ;;
  esac  
}

while getopts "uhv-:" OPTION;
do
  if [ "$OPTION" = "-" ]; then
    if [[ "$OPTARG" =~ (^[a-z0-9-]+)=(.*) ]]; then
      OPTION="${BASH_REMATCH[1]}"
      OPTARG="${BASH_REMATCH[2]}"
    else
      OPTION="${OPTARG}"
      OPTARG=""
    fi 
  fi
  processArg "$OPTION" "$OPTARG"
done
shift $[ $OPTIND - 1 ]
unit="$1"

mkdir -m1777 -p "${JHOURNALD_LOG_DIR}" 2>/dev/null
[ -d "${JHOURNALD_LOG_DIR}" ] || sudo mkdir -m1777 -p "${JHOURNALD_LOG_DIR}" 


# Pipe protocol:
# - send esc + owner info down pipe
# - if we read owner info that's not self, bail
# - first send happens in background, because not reading the pipe
#   can stall it

pipe="${JHOURNALD_LOG_DIR}/${unit}.pipe"
echo "[$$] Monitoring $pipe"
[ -p "${pipe}" ] || mkfifo "${pipe}"
echo "${ESC_SEQ} owner $$" >> "${pipe}" &
sleep 1

while true
do
  pid=''
  
  tail -F "${pipe}" \
  | sed -u -e 's/%/%%/g' \
  | while IFS="" read line
    do
      if [[ "$line" =~ ^("${ESC_SEQ} ")([^ ]*)( )(.*) ]]; then
        case "${BASH_REMATCH[2]}" in
          "owner")
            if [ "${BASH_REMATCH[4]}" = "$$" ]; then
              echo "got self owner message" >&2
              continue
            fi
            echo "new jhournald on pid ${BASH_REMATCH[4]}; shutting down pid $$" >&2
            exit 1
            ;;
          "die")
            echo "jhournald die request; shutting down pid $$" >&2
            exit 1
            ;;
          *)
            echo "unknown management command ${BASH_REMATCH[2]}" >&2
            ;;
        esac
      fi      

      if [ ! "$pid" ] && [ "$pidfile" ] && [ -f "$pidfile" ]; then
        read daemonPid < "$pidfile"
        pid="`pgrep -P $daemonPid .`"
      fi

      TZ=UTC LC_ALL=C date +"%s $HOSTNAME $name[$pid] $line" >> "${JHOURNALD_LOG_DIR}/${unit}.journal"
    done
  [ "$?" = 0 ] || exit 2
done
echo "jhournald - shutdown $$"
